version: '3.8'

services:
  # Main Bot Service
  bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: filemanager-bot
    restart: unless-stopped
    environment:
      - BOT_TOKEN=8431223774:AAHa0Hi3FVTSCS7fOK31NX1gzPz2ud-pHJM
      - DATABASE_URL=sqlite+aiosqlite:///data/filemanager.db
      - SECRET_KEY=hellomf
      - ENCRYPTION_KEY=tmkc
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=false
      - HEALTH_CHECK_INTERVAL=30
      - ADMIN_USER_ID=5445671392
    volumes:
      - ./uploads:/app/uploads:rw
      - ./keys:/app/keys:rw
      - ./logs:/app/logs:rw
      - ./data:/app/data:rw
    networks:
      - filemanager-network
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
networks:
  filemanager-network:
    driver: bridge
      - POSTGRES_USER=${POSTGRES_USER:-filemanager_prod}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/init-scripts:/docker-entrypoint-initdb.d:ro
      - postgres_backup:/backups
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - filemanager-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-filemanager_prod} -d ${POSTGRES_DB:-filemanager_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: filemanager-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-filemanager_redis_password} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - redis_backup:/backups
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - filemanager-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: filemanager-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/private:/etc/ssl/private:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - bot
    networks:
      - filemanager-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: filemanager-prometheus
    restart: unless-stopped
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - filemanager-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: filemanager-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - filemanager-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backup Service
  backup:
    build:
      context: .
      dockerfile: docker/backup/Dockerfile
    container_name: filemanager-backup
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-filemanager_prod}
      - POSTGRES_USER=${POSTGRES_USER:-filemanager_prod}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-filemanager_redis_password}
      - BACKUP_RETENTION_DAYS=30
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - S3_BUCKET=${S3_BUCKET:-}
    volumes:
      - postgres_backup:/backup/postgres
      - redis_backup:/backup/redis
      - ./backups:/backup/local
    networks:
      - filemanager-network
    depends_on:
      - postgres
      - redis
    schedules:
      - "0 2 * * *"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  postgres_backup:
    driver: local
  redis_backup:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  filemanager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16